#!/usr/bin/env python3

import sys
import os
import argparse
import shlex
import shutil
import subprocess

__version__ = '0.2'

DEFAULT_USER = 'clig'

class Clig:
    def __init__(self):
        # Top-level argument parser
        parser = argparse.ArgumentParser()
        # Sub-parser for commands
        subparsers = parser.add_subparsers(dest='command', help='available commands')
        # Global options
        parser.add_argument('--remote', '-r', help='Remote host')
        parser.add_argument('--user', '-u', default=DEFAULT_USER, help='Remote user')
        parser.add_argument('--version', '-v', action='store_true', help='Print version')
        # Create
        p_create = subparsers.add_parser('create')
        p_create.add_argument('name')
        p_create.add_argument('host', nargs='?', default=None)
        # List
        p_list = subparsers.add_parser('list')
        # Clone
        p_clone = subparsers.add_parser('clone')
        p_clone.add_argument('host')

        self.args = parser.parse_args()
        if self.args.version:
            print(__version__)
            return

        if not self.args.command:
            self.args.command = 'sh'

        fn_command = getattr(self, '_cmd_'+self.args.command)
        fn_command()

    def _call(self, command_line, *args, **kwds):
        if 'stdout' not in kwds:
            kwds['stdout'] = subprocess.PIPE
            kwds['stderr'] = subprocess.STDOUT

        process = subprocess.Popen(
            shlex.split(command_line % args),
            **kwds
            )
        out,err = process.communicate()
        if out is not None:
            return out.decode('utf-8')

    def _cmd_sh(self):
        base = os.path.abspath('.')

        fmt = '%%-%ds' % shutil.get_terminal_size().columns

        for root,directories,filenames in os.walk(base):
            if not '.git' in directories:
                continue
            #name = os.path.join(root, directory)
            name = root[len(base)+1:]
            sys.stdout.write('\x1b[1;44;37m')
            sys.stdout.write(fmt % name)
            sys.stdout.write('\x1b[0m')
            sys.stdout.write('\n')
            #print('\x1b[1;45;37m ' + name + ' \x1b[0m')
            os.chdir(root)
            self._call('git status -s', stdout=None, stderr=None)

    def _cmd_create(self):
        if self.args.host:
            print(' '.join(sys.argv[1:-1]))
            self._call('ssh %s@%s clig %s',
                self.args.user,
                self.args.host,
                ' '.join(sys.argv[1:-1]),
                )
        else:
            dirname,gitname = os.path.split(self.args.name)
            current_dir = os.getcwd()
            if dirname:
                os.makedirs(dirname, mode=0o755, exist_ok=True)
                os.chdir(dirname)
            if not gitname.endswith('.git'):
                gitname = gitname + '.git'
            if not os.path.isdir(gitname):
                self._call('git init --bare %s', gitname)
            os.chdir(current_dir)

    def _cmd_list(self):
        for name in self._list():
            print(name)

    def _cmd_clone(self):
        out = self._call('ssh %s@%s clig list',
            self.args.user,
            self.args.host,
            )
        repos = out.strip().split('\n')
        current_dir = os.getcwd()
        for repo in repos:
            dirname, gitname = os.path.split(repo)
            if dirname:
                os.makedirs(dirname, mode=0o755, exist_ok=True)
                os.chdir(dirname)
            check = gitname
            if check.endswith('.git'):
                check = check[:-4]
            sys.stdout.write('\x1b[32m' + os.path.join(dirname, gitname) + '\x1b[0m\n')
            if not os.path.isdir(check):
                out = self._call('git clone %s@%s:%s',
                    self.args.user,
                    self.args.host,
                    os.path.join(dirname, gitname),
                    )
                sys.stdout.write(out)
            os.chdir(current_dir)

    def _list(self):
        base = os.path.abspath('.')
        for root,directories,filenames in os.walk(base):
            for directory in directories:
                if not directory.endswith('.git'):
                    continue
                name = os.path.join(root, directory)
                name = name[len(base)+1:]
                yield name


if '__main__' == __name__:
    Clig()
